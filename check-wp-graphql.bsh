#!/bin/bash
#+------------------------------------------------------------------------+
#+ Name           :   check-wp-graphql.bsh                                +
#+ Description    :   Checks if the website responds to the WordPress     +
#+                :   GraphQL API (requires WPGraphQL plugin).            +
#+ Author         :   KAMINOWEB INC                                       +
#+ www            :   https://kaminoweb.com/                              +
#+                                                                        +
#+ Creation       :   20/10/24                                            +
#+ Revision       :   06/07/25                                            +
#+------------------------------------------------------------------------+

#set -x # Uncomment for debugging

# --- Functions ---

usage() {
    echo "Usage: $0 <URL>"
    echo "Example: $0 https://kaminoweb.com"
    exit 1
}

probe_url() {
    local URL_TO_CHECK=$1
    local STATUS_CODE
    STATUS_CODE=$(curl -o /dev/null -s -L --max-time 10 -w "%{http_code}" "${URL_TO_CHECK}")
    # Ensure STATUS_CODE is a number
    if ! [[ "${STATUS_CODE}" =~ ^[0-9]+$ ]]; then
        STATUS_CODE=0
    fi
    echo "${STATUS_CODE}"
}

check_url_format() {
    local URL=$1
    if [[ ! "${URL}" =~ ^https?:// ]]; then
        echo "Error: URL must start with 'http://' or 'https://'." >&2
        exit 1
    fi
}

conclusion() {
    echo ""
    if [ "${IS_WORDPRESS}" = true ]; then
        echo "Conclusion: The website at ${TARGET_URL} is likely a WordPress site with an active GraphQL API."
    else
        echo "Conclusion: The website at ${TARGET_URL} does not appear to have an active WordPress GraphQL API."
    fi
}

# --- Main Logic ---

main() {
    if [ "$#" -ne 1 ]; then
        usage
    fi

    TARGET_URL="$1"
    check_url_format "${TARGET_URL}"

    local GRAPHQL_ENDPOINT="${TARGET_URL}/graphql" # Common endpoint for WPGraphQL
    local STATUS_CODE
    IS_WORDPRESS=false # Default assumption

    echo "Attempting to check WordPress GraphQL API at: ${GRAPHQL_ENDPOINT}"
    echo "Please wait..."

    # GraphQL endpoints typically expect POST requests. A GET request might return 400, 405, or 200 with an error.
    # We'll check for these as indicators that *something* is listening.
    STATUS_CODE=$(probe_url "${GRAPHQL_ENDPOINT}")

    echo "HTTP Status Code for GraphQL endpoint: ${STATUS_CODE}"

    if [ "${STATUS_CODE}" -eq 200 ]; then
        echo "Success: The GraphQL endpoint responded with a 200 OK status code."
        echo "This indicates the API is likely active and accessible, possibly accepting GET requests."
        IS_WORDPRESS=true
    elif [ "${STATUS_CODE}" -eq 400 ]; then
        echo "Info: The GraphQL endpoint returned a 400 Bad Request status code."
        echo "This is a common response for GraphQL endpoints when a GET request is made without a valid query, indicating the API is present."
        IS_WORDPRESS=true
    elif [ "${STATUS_CODE}" -eq 405 ]; then
        echo "Info: The GraphQL endpoint returned a 405 Method Not Allowed status code."
        echo "This is a common response for GraphQL endpoints that strictly expect POST requests, indicating the API is present."
        IS_WORDPRESS=true
    elif [ "${STATUS_CODE}" -eq 404 ]; then
        echo "Warning: The GraphQL endpoint returned a 404 Not Found error."
        echo "This usually means the WPGraphQL plugin is not installed or the endpoint is different."
    elif [ "${STATUS_CODE}" -eq 0 ]; then
        echo "Error: Could not connect to the GraphQL endpoint or received an invalid response."
        echo "This might indicate a network issue, an invalid URL, or the server is down/unreachable."
    else
        echo "Warning: The GraphQL endpoint returned an unexpected status code: ${STATUS_CODE}."
        echo "This might indicate an issue with the API, server configuration, or a firewall blocking access."
    fi

    conclusion
}

# --- Execute Script ---
# Pass all command-line arguments to the main function
main "$@"
