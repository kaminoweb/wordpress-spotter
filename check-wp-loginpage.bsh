#!/bin/bash
#+------------------------------------------------------------------------+
#+ Name           :   check-wp-loginpage.bsh                              +
#+ Description    :   Verifies the existence of the WordPress login page  +
#+                :   (/wp-login.php) for a given URL by checking its     +
#+                :   HTTP status code.                                   +
#+ Author         :   KAMINOWEB INC                                       +
#+ www            :   https://kaminoweb.com/                              +
#+                                                                        +
#+ Creation       :   20/10/24                                            +
#+ Revision       :   06/07/25                                            +
#+------------------------------------------------------------------------+

#set -x # Uncomment for debugging

# --- Functions ---

usage() {
    echo "Usage: $0 <URL>"
    echo "Example: $0 https://kaminoweb.com"
    exit 1
}

probe_url() {
    local URL_TO_CHECK=$1
    local STATUS_CODE
    # curl -o /dev/null: discard output
    # -s: silent mode (don't show progress meter or error messages)
    # -L: follow redirects
    # --max-time 10: maximum time in seconds that you allow the whole operation to take
    # -w "%{http_code}": print only the HTTP status code
    STATUS_CODE=$(curl -o /dev/null -s -L --max-time 10 -w "%{http_code}" "${URL_TO_CHECK}")
    # Ensure STATUS_CODE is a number. If curl fails or returns non-numeric, set to 0.
    if ! [[ "${STATUS_CODE}" =~ ^[0-9]+$ ]]; then
        STATUS_CODE=0
    fi
    echo "${STATUS_CODE}"
}

check_url_format() {
    local URL=$1
    if [[ ! "${URL}" =~ ^https?:// ]]; then
        echo "Error: URL must start with 'http://' or 'https://'." >&2
        exit 1
    fi
}

conclusion() {
    echo ""
    if [ "${IS_WORDPRESS}" = true ]; then
        echo "Conclusion: The WordPress login page (/wp-login.php) was found at ${TARGET_URL}."
    else
        echo "Conclusion: The WordPress login page (/wp-login.php) was NOT found at ${TARGET_URL}."
    fi
}

# --- Main Logic ---

main() {
    if [ -z "$1" ]; then
        usage
    fi

    TARGET_URL=$1
    check_url_format "${TARGET_URL}"

    # Construct the full URL for the WordPress login page
    WP_LOGIN_URL="${TARGET_URL}/wp-login.php"

    echo "Checking for WordPress login page at: ${WP_LOGIN_URL}"

    # Probe the URL to get its HTTP status code
    HTTP_STATUS=$(probe_url "${WP_LOGIN_URL}")

    # Determine if the status code indicates the presence of the login page.
    # A 2xx (success), 3xx (redirect), 401 (unauthorized), or 403 (forbidden) status
    # generally indicates the page exists, even if access is restricted.
    # A 404 (Not Found) indicates it does not exist.
    echo "HTTP Status Code for ${WP_LOGIN_URL}: ${HTTP_STATUS}"

    if [[ "${HTTP_STATUS}" -ge 200 && "${HTTP_STATUS}" -lt 400 ]] || \
       [[ "${HTTP_STATUS}" -eq 401 ]] || \
       [[ "${HTTP_STATUS}" -eq 403 ]]; then
        IS_WORDPRESS=true
    elif [[ "${HTTP_STATUS}" -eq 404 ]]; then
        IS_WORDPRESS=false
    else
        echo "Warning: Received an unexpected HTTP status code (${HTTP_STATUS}). Cannot definitively confirm." >&2
        IS_WORDPRESS=false # Default to false if status is ambiguous or an error
    fi

    conclusion
}

# --- Execute Script ---
# Pass all command-line arguments to the main function
main "$@"
